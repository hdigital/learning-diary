---
date: "2023-10-07"
image: package-unsplash.jpg
categories: [R, packaging]
---

# R packages with pak

I started using [pak](https://pak.r-lib.org/) install and manage R packages.

_pak_ can be used to install all R packages used in a project.

The use case I am mainly interested in is installing and locking project packages to create reproducible environments. This can be accomplished with _pak_ and [renv](https://rstudio.github.io/renv/index.html). In a [previous post](/posts/2023-07-29-r-renv/index.qmd), I discussed an approach with _renv_ only.

_renv_ is used to detect all packages used in a project and _pac_ to create a (platform dependent) lockfile. This lockfile can be used to install the version pinned in the lock file later with _pak_ without creating an _renv_ environment.

Here is an example — not run:

```r
# get packages used in project folder
deps <- unique(renv::dependencies()[["Package"]])

# install project packages
pak::pkg_install(deps, ask = FALSE, upgrade = FALSE)
# pak::lockfile_install()

# create lock files
pak::lockfile_create(deps)
# renv::snapshot(prompt = FALSE)
```

_renv_ can be used to create a lock file as well. However, currently you have to use _renv_ to install dependencies from an `renv.lock` file and need to create a new _renv_ environment to reinstall the packages. There are plans to support installing packages from `renv.lock` with _pak_ — see [#343](https://github.com/r-lib/pak/issues/343)

Here are the R packages _renv_ finds locally.

```{r}
renv::dependencies()[["Package"]] |>
  unique() |>
  sort()
```

## Python vs. R packaging tools

Pinning package versions in a lock file is an established workflow in Python with [pip-tools](https://github.com/jazzband/pip-tools).

In _renv_ pinning package versions and creating local environments are too tightly coupled in my view. Often, I don't want to create an environment for a project and need to document the used package versions only. In Docker or cloud platforms I don't like to use local environments. In a local R install, working with the latest versions of R packages and freezing them is often sufficient for me.

I hope _pak_ will provide the R packaging solution I am looking for.

---

![](package-unsplash.jpg)
