{
  "hash": "efa8efb9458ecbc270a4bb2e78695cbe",
  "result": {
    "markdown": "---\ndate: '2023-11-23'\nimage: jupyter-lite-logo.png\ncategories:\n  - Python\ntitle: JupyterLite\n---\n\n\n\n\n\nI listened to the the recent _Talk Python To Me_ episode [Celebrating JupyterLab 4 and Jupyter 7 Releases](https://talkpython.fm/episodes/show/438/celebrating-jupyterlab-4-and-jupyter-7-releases) and became aware of [JupyterLite](https://github.com/jupyterlite) which I had not used before.\n\nI was impressed to see that you can now [run JupyterLab in a browser](https://jupyterlite.github.io/demo/lab/index.html).\n\nMany shortcuts work and you can activate the command pallette with _Shift + Cmd/Ctrl + C_\n\nFor me, the examples in the _pyodide_ folder were helpful and demonstrated how much Python data analysis can be already done with this fully web based version of Jupyter.\n\nSo now I can run Python in an interactive environment on any computer with JupyterLite. I may use _Codespaces_ or _Google Colab_ in a browser more often because they provide the standard Python environment. For small snippets and examples I will also use JupyterLite.\n\n## Visualization example\n\nHere is an example form the _altair.ipynb_ notebook in the _pyodide_ folder. It runs here but also in the JupyterLite, purely browser based, version.\n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nalt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n\n<style>\n  #altair-viz-c40a904a59ab437f8b09083424836217.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-c40a904a59ab437f8b09083424836217.vega-embed details,\n  #altair-viz-c40a904a59ab437f8b09083424836217.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-c40a904a59ab437f8b09083424836217\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-c40a904a59ab437f8b09083424836217\") {\n      outputDiv = document.getElementById(\"altair-viz-c40a904a59ab437f8b09083424836217\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.15.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.15.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 300, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-c2a3e89ba9d5d1687d5e8c28d630a033\"}, \"mark\": {\"type\": \"bar\"}, \"encoding\": {\"x\": {\"field\": \"a\", \"type\": \"nominal\"}, \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.15.1.json\", \"datasets\": {\"data-c2a3e89ba9d5d1687d5e8c28d630a033\": [{\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43}, {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53}, {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n## http requests\n\nI played around a little with making http requests. You can install the [requests](https://github.com/psf/requests) package but the http requests don't work. You have to use the [js](https://pyodide.org/en/stable/usage/api/js-api.html) module provided by [pyodide](https://github.com/pyodide/pyodide) instead.\n\nHere is the notebook I wrote.\n\n[network-requests.ipynb.txt](network-requests.ipynb.txt)\n\nI added a _txt_ extension because I don't want the notebook to be rendered in Quarto. Save it, remove the _txt_ extension, drag and drop it into the JupyterLite browser window and run it.\n\n## pip with micropip\n\nYou can install packages with _pip_. In JupyterLite, it is based on [micropip](https://github.com/pyodide/micropip).\n\nThe [recommended](https://jupyterlite.readthedocs.io/en/latest/howto/pyodide/packages.html#installing-packages-at-runtime) way to install packages is:\n\n```sh\n%pip install -q snowballstemmer\n```\n\nSo far, I have been reluctant to use pip with a [magic command](https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-pip) but may use it more regularly in the future.\n\nHere is a Python version to use _micropip_.\n\n```py\nimport micropip\n\nif \"snowballstemmer\" not in micropip.list():\n    await micropip.install(\"snowballstemmer\")\n```\n\n---\n\n![](jupyter-lite-logo.png)\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}