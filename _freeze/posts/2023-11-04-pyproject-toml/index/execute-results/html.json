{
  "hash": "857ba8dacc21e586b7cc4ec2bd44fec0",
  "result": {
    "markdown": "---\ndate: '2023-11-04'\nimage: python-logo.png\ncategories:\n  - Python\ntitle: pyproject.toml metadata and dependencies\n---\n\n\n\n\n\nPython allows to specify [metadata](https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#declaring-project-metadata) and [dependencies](https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#dependencies-optional-dependencies) in a `pyproject.toml`.\n\nI have started using the _metadata_ declaration recently and tried the dependency specification this week.\n\nI added an [example](pyproject.toml) to the folder of the post. It contains project metadata and examples for project and development dependencies.\n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\ndef print_file(file_name):\n  with open(file_name, \"r\") as file:\n      print(file.read())\n\nprint_file(\"pyproject.toml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[project]\nname = \"hd-example\"\nversion = \"0.1\"\ndescription = \"An example for pyproject\"\nmaintainers = [{ name = \"Holger Döring\" }]\nlicense = { text = \"MIT License\" }\nrequires-python = \">=3.11\"\ndependencies = [\n  \"requests\",\n]\n\n[project.optional-dependencies]\ndev = [\n  \"pip-tools\",\n  \"ruff\",\n]\n\n[project.urls]\n homepage = \"\"\nrepository = \"https://github.com/hdigital/starter-python.git\"\n\n\n# specify build system to run pip-tools\n# (application is not a package and no build is needed)\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n```\n:::\n:::\n\n\nThere is a [toml parser](https://docs.python.org/3/library/tomllib.html) in the standard library since Python 3.11, released in October last year. It can be used to read the `pyproject.toml`.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport tomllib\n\nwith open(\"pyproject.toml\", \"rb\") as toml_file:\n    toml_data = tomllib.load(toml_file)\n\ntoml_data\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n{'project': {'name': 'hd-example',\n  'version': '0.1',\n  'description': 'An example for pyproject',\n  'maintainers': [{'name': 'Holger Döring'}],\n  'license': {'text': 'MIT License'},\n  'requires-python': '>=3.11',\n  'dependencies': ['requests'],\n  'optional-dependencies': {'dev': ['pip-tools', 'ruff']},\n  'urls': {'homepage': '',\n   'repository': 'https://github.com/hdigital/starter-python.git'}},\n 'build-system': {'requires': ['hatchling'],\n  'build-backend': 'hatchling.build'}}\n```\n:::\n:::\n\n\nI like to pin dependencies in one `requirements.txt`. Such a file can be created with [pip-tools](https://github.com/jazzband/pip-tools#requirements-from-pyprojecttoml).\n\n`python -m piptools compile --upgrade --extra dev pyproject.toml`\n\nUsually, I include the `--generate-hashes` option but leave it out here to shorten the output by not including hash keys.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\nprint_file(\"requirements.txt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#\n# This file is autogenerated by pip-compile with Python 3.11\n# by the following command:\n#\n#    pip-compile --extra=dev pyproject.toml\n#\nbuild==1.0.3\n    # via pip-tools\ncertifi==2023.7.22\n    # via requests\ncharset-normalizer==3.3.2\n    # via requests\nclick==8.1.7\n    # via pip-tools\nidna==3.4\n    # via requests\npackaging==23.2\n    # via build\npip-tools==7.3.0\n    # via hd-example (pyproject.toml)\npyproject-hooks==1.0.0\n    # via build\nrequests==2.31.0\n    # via hd-example (pyproject.toml)\nruff==0.1.4\n    # via hd-example (pyproject.toml)\nurllib3==2.0.7\n    # via requests\nwheel==0.41.3\n    # via pip-tools\n\n# The following packages are considered to be unsafe in a requirements file:\n# pip\n# setuptools\n\n```\n:::\n:::\n\n\n---\n\n![](python-logo.png)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}