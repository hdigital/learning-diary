{
  "hash": "2e3ef2bf35b041f7384377042a8ec035",
  "result": {
    "markdown": "---\ndate: '2023-02-26'\nimage: quarto-logo.png\ncategories:\n  - Docker\n  - Python\n  - Quarto\ntitle: A few days of Quarto\n---\n\n\n\n\n\n## Quarto\n\nSo I have had my first experience with creating dynamic documents in Quarto. It has been a pleasant experience. I could use some of my RMarkdown und knitr skills and like that it is a program independent of R and RStudio. Working in VS Code to create a blog on _Things I Learned_ worked well.\n\nOnly working with Python was really challenging. For some time several attempts to find the local Python version in the `env` folder did not work. `quarto check` found the respective Python version but it was not used when I rendered the document. At the end it was simply the header option `jupyter: python3` in the qmd-document that did the trick.\n\nRendering a document with Python and R cells remained a challenge. Again, it was an option that was missing. Setting `#| python.reticulate: false` in a Python cell solved the issue.\n\nMany of my Python struggles in Quarto may have been related to the [reticulate](https://rstudio.github.io/reticulate/) R package.\n\n## Docker\n\nTo get there I also created a `Dockerfile` to have an OS independent version of Quarto. That was another challenge until I first found a [Rocker](https://github.com/rocker-org/rocker) configuration that worked with Python. It is a whopping 4.5 GB image but incudes Latex to create pdf-files.\n\nLater I did some more experimenting with Docker and created a Jupyter Lab Docker image that is also quite large with almost 5 GB. In addition, I created a smaller image that includes only a minimal Python and Jupyter Lab. At least this one is a little smaller than 1 GB.\n\nI'll try to work with the local Quarto versions mainly but it is good to have OS independent Docker versions as well.\n\n## Python in Quarto\n\nHere is a [Quarto Guide](https://quarto.org/docs/computations/python.html#code-blocks) demonstration of a line plot on a polar axis, see @fig-polar.\n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'}\n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![A line plot on a polar axis](index_files/figure-html/fig-polar-output-1.png){#fig-polar width=450 height=439}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}