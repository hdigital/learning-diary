{
  "hash": "d654629454e06260821bad52a180559b",
  "result": {
    "markdown": "---\ndate: '2023-11-25'\nimage: ipython-logo.png\ncategories:\n  - Python\ntitle: iPython display\nformat:\n  html:\n    toc: true\n---\n\nThe _display_ functions from [iPython](https://ipython.readthedocs.io/en/stable/interactive/tutorial.html) is nice in an interactive Jupyter notebook. Unfortunately, it does not work equally well in Quarto or in a Jupyter notebook converted into html.\n\nThe _JSON_ method is particularly helpful to explore a Python dictionary but does not work in rendered notebooks.\n\nNevertheless, it was good to get to know the functions and I add them here for the learning record.\n\n---\n\nsee the [Jupyter notebook](/snippets/ipython-display-nbconvert.html) (with `nbconvert`) and [Quarto rendered](/snippets/ipython-display.html) version.\n\n## JSON\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom IPython.display import JSON\n\nperson = {\n    'name': {\n        'first': 'Jane',\n        'last': 'Doe'\n    },\n    'age': 43,\n    'email': 'jane.doe@example.com'\n}\n\nJSON(person)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n<IPython.core.display.JSON object>\n```\n:::\n:::\n\n\n![](json-screenshot.png)\n\n---\n\n## Single element\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom IPython.display import Markdown, HTML, JSON, Math\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nHTML(\"<h2>HTML Title</h2>\")\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<h2>HTML Title</h2>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nMarkdown(\"## Markdown title\")\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n## Markdown title\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nMath(\"a^2 + b^2 = c^2\")\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n$\\displaystyle a^2 + b^2 = c^2$\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nJSON([\"foo\", {\"bar\": (\"baz\", None, 1.0, 2)}], expanded=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<IPython.core.display.JSON object>\n```\n:::\n:::\n\n\n## Multiple elements\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndisplay(HTML(\"<em>HTML element</em>\"))\ndisplay(Markdown(\"__Markdown title__\"))\ndisplay(Math(\"a^2 + b^2 = c^2\"))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<em>HTML element</em>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n__Markdown title__\n:::\n\n::: {.cell-output .cell-output-display}\n$\\displaystyle a^2 + b^2 = c^2$\n:::\n:::\n\n\nAn example of a Quarto issue with `display()`. The elements are ordered differently in the code cell and the output.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nprint(\"'first element'\")\ndisplay(\"second element\")\nprint(\"'third element'\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'first element'\n'third element'\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n'second element'\n```\n:::\n:::\n\n\nRendering of dictionaries with `JSON` does not work in Quarto or nbconvert.\n\n---\n\n## Quarto workflow\n\nA note how I render the Jupyter notebook of the post.\n\n```sh\ncd snippets ;\nruff format ipython-display.ipynb ;\njupyter-nbconvert --execute --inplace ipython-display.ipynb ;\nnbdev_clean --fname ipython-display.ipynb ;\njupyter-nbconvert --to html ipython-display.ipynb --output ipython-display-nbconvert.html\n```\n\n---\n\n![](ipython-logo.png)\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}