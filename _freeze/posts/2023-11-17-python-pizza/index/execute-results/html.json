{
  "hash": "b805fbe846f5a1674e0427422942bb77",
  "result": {
    "markdown": "---\ndate: '2023-11-17'\nimage: python-pizza-logo.png\ncategories:\n  - Python\ntitle: Python Pizza Hamburg\n---\n\n\n\n\n\nThis Friday, I attended the [Python Pizza micro conference](https://hamburg.python.pizza/) in Hamburg. It was a very nice, welcoming and informative event. I liked the broad perspectives on how-to, learning and diversity. The topics of the talks were very accessible and mainly experience based.\n\nSome of the technical things I took out:\n\n* \"Streamlit: Making Data Shine in Minute\" (Alessandro Romano) showed me that [Streamlit](https://github.com/streamlit/streamlit) may be the tool I need to quickly create data dashboards without getting into webdev details.\n* \"Introducing the ORMIR community and the book 'Learn Python with Jupyter'\" (Serena Bonaretti) helped me to better understand the evolving relation between open source, open science, research and learning.\n* \"Choose HTMX and avoid learning too much JavaScript\" (Martin Borus) demonstrated once more that I should start to experiment with [htmx](https://github.com/bigskysoftware/htmx). I run the [repository code](https://github.com/mborus/choose_htmx) in Codespaces later and want to try [FastAPI](https://github.com/tiangolo/fastapi) and async web page element reloading.\n\n\nThe friendly environment and some nice exchanges about data science, Python, and open source projects over delicious pizza were really nice.\n\n\n---\n\nThis was a Python Pizza conference. So I asked ChatGPT to draw a Pizza in Python, something it happily did.\n\nChatGPT message: _draw a figure of a pizza in python in a jupyter notebook_\n\nThis provided code for a pizza with peperoni. I tried to get a [Vega-Altair](https://altair-viz.github.io/) version but this did not work out. So I stayed with the [Matplotlib](https://matplotlib.org/) version and asked to have some pizza slices.\n\nChatGPT message: _add slices to the matplotlib plot_\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\n# Create a figure and axis\nfig, ax = plt.subplots()\n\n# Draw the pizza circle\npizza_circle = plt.Circle((0.5, 0.5), 0.4, color='brown', fill=True)\nax.add_patch(pizza_circle)\n\n# Draw the cheese circle (a smaller circle on top of the pizza)\ncheese_circle = plt.Circle((0.5, 0.5), 0.35, color='yellow', fill=True)\nax.add_patch(cheese_circle)\n\n# Draw pizza slices\nnum_slices = 8\ntheta = 360 / num_slices\nslice_colors = ['orange', 'lightgreen', 'tomato', 'wheat', 'lightcoral', 'lightblue', 'sandybrown', 'lightpink']\n\nfor i in range(num_slices):\n    slice_wedge = patches.Wedge((0.5, 0.5), 0.4, i * theta, (i + 1) * theta, color=slice_colors[i], fill=True)\n    ax.add_patch(slice_wedge)\n\n# Set aspect ratio to be equal\nax.set_aspect('equal', adjustable='box')\n\n# Set axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove axis labels and ticks\nax.set_xticks([])\nax.set_yticks([])\nax.set_xticklabels([])\nax.set_yticklabels([])\n\n# Set the title\nplt.title(\"Delicious Pizza with Slices\")\n\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=389 height=409}\n:::\n:::\n\n\n---\n\n![](python-pizza-photo.png)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}