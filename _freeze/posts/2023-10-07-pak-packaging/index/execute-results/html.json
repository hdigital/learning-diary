{
  "hash": "238a07b3586a45b34c3ca7b8e23ff0ce",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: \"2023-10-07\"\nimage: package-unsplash.jpg\ncategories: [R]\n---\n\n\n# R packages with pak\n\nI started using [pak](https://pak.r-lib.org/) install and manage R packages.\n\n_pak_ can be used to install all R packages used in a project.\n\nThe use case I am mainly interested in is installing and locking project packages to create reproducible environments. This can be accomplished with _pak_ and [renv](https://rstudio.github.io/renv/index.html). In a [previous post](/posts/2023-07-29-renv/index.qmd), I discussed an approach with _renv_ only.\n\n_renv_ is used to detect all packages used in a project and _pac_ to create a (platform dependent) lockfile. This lockfile can be used to install the version pinned in the lock file later with _pak_ without creating an _renv_ environment.\n\nHere is an example — not run:\n\n```r\n# get packages used in project folder\ndeps <- unique(renv::dependencies()[[\"Package\"]])\n\n# install project packages\npak::pkg_install(deps, ask = FALSE, upgrade = FALSE)\n# pak::lockfile_install()\n\n# create lock files\npak::lockfile_create(deps)\n# renv::snapshot(prompt = FALSE)\n```\n\n_renv_ can be used to create a lock file as well. However, currently you have to use _renv_ to install dependencies from an `renv.lock` file and need to create a new _renv_ environment to reinstall the packages. There are plans to support installing packages from `renv.lock` with _pak_ — see [#343](https://github.com/r-lib/pak/issues/343)\n\nHere are the R packages _renv_ finds locally.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::dependencies()[[\"Package\"]] |>\n  unique() |>\n  sort()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFinding R package dependencies ... Done!\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"renv\"      \"rmarkdown\"\n```\n\n\n:::\n:::\n\n\n## Python vs. R packaging tools\n\nPinning package versions in a lock file is an established workflow in Python with [pip-tools](https://github.com/jazzband/pip-tools).\n\nIn _renv_ pinning package versions and creating local environments are too tightly coupled in my view. Often, I don't want to create an environment for a project and need to document the used package versions only. In Docker or cloud platforms I don't like to use local environments. In a local R install, working with the latest versions of R packages and freezing them is often sufficient for me.\n\nI hope _pak_ will provide the R packaging solution I am looking for.\n\n---\n\n![](package-unsplash.jpg)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}