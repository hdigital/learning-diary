{
  "hash": "4236903613cb54dcd4f830fc7112fe44",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ndate: '2024-02-26'\nimage: python-logo.png\ncategories:\n  - Python\ntitle: Python f-strings\n---\n\n\n\n\n\nHere are some examples of\n[f-strings](https://docs.python.org/3/tutorial/inputoutput.html#fancier-output-formatting)\nin Python inspired by a [post](https://note.nkmk.me/en/python-f-strings/)\nand a [cheat sheet](https://fstring.help/cheat/).\n\n\n::: {#052c76d2 .cell execution_count=1}\n``` {.python .cell-code}\na = 2\nb = 3\n```\n:::\n\n\n::: {#3f381161 .cell execution_count=2}\n``` {.python .cell-code}\nf\"{a} + {b}\"\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'2 + 3'\n```\n:::\n:::\n\n\n::: {#fd495da3 .cell execution_count=3}\n``` {.python .cell-code}\nf\"{a=} and {b=}\"\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'a=2 and b=3'\n```\n:::\n:::\n\n\n::: {#f6b7581e .cell execution_count=4}\n``` {.python .cell-code}\nf\"a + b = {a+b}\"\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'a + b = 5'\n```\n:::\n:::\n\n\nCurly brackets in an f-string\n\n::: {#5505e4d1 .cell execution_count=5}\n``` {.python .cell-code}\nn = 123\n\nf'{{}}-{n}-{{{n}}}'\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'{}-123-{123}'\n```\n:::\n:::\n\n\n#### Number formatting\n\n::: {#0df20324 .cell execution_count=6}\n``` {.python .cell-code}\nvar = 1234567890.1234\n\nf'{var:,}'\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'1,234,567,890.1234'\n```\n:::\n:::\n\n\n::: {#9590b109 .cell execution_count=7}\n``` {.python .cell-code}\nf'round: {var:.2f}'\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'round: 1234567890.12'\n```\n:::\n:::\n\n\n::: {#e28c7e29 .cell execution_count=8}\n``` {.python .cell-code}\nf'comma: {var:,}'\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'comma: 1,234,567,890.1234'\n```\n:::\n:::\n\n\n::: {#3ed3314e .cell execution_count=9}\n``` {.python .cell-code}\nf'comma: {var:,.2f}'\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n'comma: 1,234,567,890.12'\n```\n:::\n:::\n\n\n::: {#02487771 .cell execution_count=10}\n``` {.python .cell-code}\nimport datetime\n\ndt = datetime.datetime(2026, 2, 21, 19, 45, 30)\n\nf'{dt}'\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'2026-02-21 19:45:30'\n```\n:::\n:::\n\n\n::: {#105d1195 .cell execution_count=11}\n``` {.python .cell-code}\nf'{dt:%Y-%m-%d}'\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'2026-02-21'\n```\n:::\n:::\n\n\n::: {#f2ed52e0 .cell execution_count=12}\n``` {.python .cell-code}\nf'{dt.isoformat()}'\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n'2026-02-21T19:45:30'\n```\n:::\n:::\n\n\n---\n\n![](python-logo.png)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}