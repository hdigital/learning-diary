{
  "hash": "8bc3133cbd764ac5d9c78bc210610daa",
  "result": {
    "markdown": "---\ndate: \"2023-06-30\"\nimage: dplyr-logo.png\ncategories: [R, tidyverse]\ntitle: \"dplyr programming\"\ntoc: true\n---\n\n\nI wanted to use some dynamic variable names in dplyr and had to look up [dplyr programming](https://dplyr.tidyverse.org/articles/programming.html) again.\n\nThis is something I have to look up regularly and where I am still not comfortable with the terminology. Here, I find the respective tidyverse documentation rather challenging. However, dplyr programming is also something that I use rarely.\n\nSo here is a brief summary of my recent exploration of the topic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ncars <- as_tibble(datasets::mtcars)\nvar_select <- \"cyl\"\n```\n:::\n\n\n\n## Pronoun .data\n\nUse the `.data` pronoun to access a variable name in a character object in a dplyr workflow.\n\n::: {.cell}\n\n```{.r .cell-code}\ncars |> count(.data[[var_select]])\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl|  n|\n|---:|--:|\n|   4| 11|\n|   6|  7|\n|   8| 14|\n\n</div>\n:::\n\n```{.r .cell-code}\ncars |> count(.data[[\"cyl\"]])\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl|  n|\n|---:|--:|\n|   4| 11|\n|   6|  7|\n|   8| 14|\n\n</div>\n:::\n:::\n\n\n## Embrace argument\n\nA variable used as a function argument can be _embraced_ with double braces to use it in a dplyr workflow.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_var <- function(.dt, .var) {\n    summarise(.dt, n = n(), .by = all_of({{ .var }}))\n}\n\ncount_var(cars, var_select)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl|  n|\n|---:|--:|\n|   6|  7|\n|   4| 11|\n|   8| 14|\n\n</div>\n:::\n\n```{.r .cell-code}\ncount_var(cars, c(var_select, \"vs\"))\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl| vs|  n|\n|---:|--:|--:|\n|   6|  0|  3|\n|   4|  1| 10|\n|   6|  1|  4|\n|   8|  0| 14|\n|   4|  0|  1|\n\n</div>\n:::\n:::\n\n\n\n## Name injection\n\nName injection can be used to assign new variable names in a dplyr workflow.\n\n`:=` is used as the assignment operator with dynamic new variable names.\n\n::: {.cell}\n\n```{.r .cell-code}\ncars |>\n    summarise(\"{var_select}_count\" := n(),\n        .by = all_of({{ var_select }})\n    )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl| cyl_count|\n|---:|---------:|\n|   6|         7|\n|   4|        11|\n|   8|        14|\n\n</div>\n:::\n\n```{.r .cell-code}\ncount_var2 <- function(dt, var) {\n    summarise(dt, \"{var}_count\" := n(),\n        .by = all_of({{ var }})\n    )\n}\n\ncount_var2(cars, \"cyl\")\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl| cyl_count|\n|---:|---------:|\n|   6|         7|\n|   4|        11|\n|   8|        14|\n\n</div>\n:::\n\n```{.r .cell-code}\ncount_var3 <- function(dt, var) {\n    summarise(dt, \"{{var}}_count\" := n(),\n        .by = all_of({{ var }})\n    )\n}\n\ncount_var3(cars, var_select)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| cyl| var_select_count|\n|---:|----------------:|\n|   6|                7|\n|   4|               11|\n|   8|               14|\n\n</div>\n:::\n\n```{.r .cell-code}\nsummarise_dt <- function(data, var) {\n    data |>\n        summarise(\n            \"mean_{{var}}\" := mean({{ var }}),\n            \"sum_{{var}}\" := sum({{ var }}),\n            \"n_{{var}}\" := n()\n        )\n}\n\nsummarise_dt(cars, cyl)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| mean_cyl| sum_cyl| n_cyl|\n|--------:|-------:|-----:|\n|   6.1875|     198|    32|\n\n</div>\n:::\n:::\n\n\n---\n\n![](dplyr-logo.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}