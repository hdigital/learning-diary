{
  "hash": "656d326bbb3e096ca0c1e775d28f10ad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: \"2023-06-24\"\nimage: tidyverse-glue.png\ncategories: [R]\n---\n\n\n# string interpolation with str_glue()\n\nIn R, I like string interpolation with [glue](https://glue.tidyverse.org/) and prefer it over Base-R `paste(), paste0(), sprintf()`. Regularly, I use `glue()` and forget to load the respective library at the top of the script or find `glue::glue()` rather verbose.\n\nA tidyverse [blog post](https://www.tidyverse.org/blog/2023/05/purrr-walk-this-way/) made me realize that [stringr](https://stringr.tidyverse.org/) includes a `str_glue()` function that wraps `glue()`. stringr is loaded with `library(tidyverse)` so that I can include it into my regular tidyverse workflow.\n\nIt is also documented on the [stringr cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf), but I have not relized that. It serves as useful reminder to look at the [Posit Cheatsheets](https://rstudio.github.io/cheatsheets/) more regularly to review and update my workflow.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\n\nname <- \"Jane\"\n\nstr_glue(\"Hi {name}. How are you?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nHi Jane. How are you?\n```\n\n\n:::\n:::\n\n\n---\n\n![](tidyverse-glue.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}