<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Learning</title>
<link>https://hdigital.github.io/learning-diary/index.html</link>
<atom:link href="https://hdigital.github.io/learning-diary/index.xml" rel="self" type="application/rss+xml"/>
<description>Things I learned</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Sun, 13 Aug 2023 22:00:00 GMT</lastBuildDate>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-08-14-file-hash/index.html</link>
  <description><![CDATA[ 



<section id="file-hashing" class="level1">
<h1>File hashing</h1>
<p>To increase the transparency of my work, I was interested in file hashing. It allows to assign a unique value to a file. Such a value is calculated with a defined algorithm.</p>
<p>In R, the <a href="https://rlang.r-lib.org/">rlang</a> library provides the <a href="https://rlang.r-lib.org/reference/hash.html"><code>hash_file()</code></a> function and uses the XXH128 hash algorithm to generate a 128-bit hash.</p>
<p>This can be used to uniquely identify a data file. For reproducible research, you can add hash values for the datafiles used in a project to uniquely identify them.</p>
<p>Here, I have created two files for data sets from the <em>datasets</em> library and calculate the hash values of these files.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_csv</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>iris, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris.csv"</span>)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_csv</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mtcars, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars.csv"</span>)</span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">files =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">glob =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.csv"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hash =</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hash_file</span>(files))</span></code></pre></div>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">files</th>
<th style="text-align: left;">hash</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">iris.csv</td>
<td style="text-align: left;">dbdc1846dff7fba30a88d5b23e15ea80</td>
</tr>
<tr class="even">
<td style="text-align: left;">mtcars.csv</td>
<td style="text-align: left;">1d350737ac40dc6fb6ae8f5ad616fc4e</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<hr>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-08-14-file-hash/rlang-logo.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-08-14-file-hash/index.html</guid>
  <pubDate>Sun, 13 Aug 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-08-14-file-hash/rlang-logo.png" medium="image" type="image/png" height="139" width="120"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-08-12-dplyr-join-by/index.html</link>
  <description><![CDATA[ 



<section id="dplyr-join_by-argument" class="level1">
<h1>dplyr join_by() argument</h1>
<p><a href="https://www.tidyverse.org/blog/2023/03/dplyr-1-1-1/">dplyr 1.1</a> introduced a new option for the <code>by</code> argument to the <code>*_join()</code> family of functions. You can now use <code>join_by()</code> instead of the previous <code>c()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gapminder)</span>
<span id="cb1-3"></span>
<span id="cb1-4">dt_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb1-5">    gapminder <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(country_codes, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> country))</span></code></pre></div>
</div>
<p>The short version without the named parameter works as well when using it as the third parameter in a <code>*_join()</code> function (the second parameter in a pipe.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">dt_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb2-2">    gapminder <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(country_codes, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> country))</span></code></pre></div>
</div>
<p>It is an alternative to using <code>c()</code> in the argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">dt_3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb3-2">    gapminder <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(country_codes, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>))</span></code></pre></div>
</div>
<p>The three created data frames are identical.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(dt_1, dt_2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(dt_1, dt_3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>And here is a figure using the created data frame.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3">pl_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb6-4">    dt_1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(year)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">country =</span> iso_alpha, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gdp_per_capita =</span> gdpPercap, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">life_expectency =</span> lifeExp)</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(pl_dt, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> gdp_per_capita, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> life_expectency)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkgrey"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb6-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_n</span>(pl_dt, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb6-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> gdp_per_capita, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> life_expectency, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> country),</span>
<span id="cb6-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span></span>
<span id="cb6-16">    )</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-08-12-dplyr-join-by/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<hr>
<p>This is something I missed when reading the change log of the dplyr 1.1. release and did not find out about by reading the help pages of the <code>*_join()</code> functions.</p>
<p>It was different with the <a href="https://www.tidyverse.org/blog/2023/03/dplyr-1-1-1/#revisiting-multiple-matches">multiple matches revisions</a> in dplyr 1.1. Here, I quickly run into the new warning message, explored and used it. To handle multiple matches more explicitly is really nice and I have started to use it regularly.</p>
<p>The recent post <a href="https://www.tidyverse.org/blog/2023/08/teach-tidyverse-23/#improved-and-expanded-_join-functionality">Teaching the tidyverse in 2023</a> provided a good review of the new features in the tidyverse released over the last months. I was aware of most of the changes and have started using the new approaches.</p>
<p>It is nice to see that the tidyverse is evolving and that the changes are documented so well.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-08-12-dplyr-join-by/index.html</guid>
  <pubDate>Fri, 11 Aug 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-08-12-dplyr-join-by/dplyr-logo.png" medium="image" type="image/png" height="166" width="144"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-07-30-playwright/index.html</link>
  <description><![CDATA[ 



<section id="screenshots-with-playwright" class="level1">
<h1>Screenshots with Playwright</h1>
<p>I heard about <a href="https://playwright.dev/python/docs/library">Playwright</a> in <a href="https://talkpython.fm/episodes/show/424/shiny-for-python">Episode #424</a> of <a href="https://talkpython.fm/">Talk Python To Me</a>.</p>
<p>Here is an example of taking screenshots from the Playwright documentation which I updated for taking screenshots of this learning blog.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> playwright.sync_api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sync_playwright</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> sync_playwright() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> spw:</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> browser_type <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [spw.chromium, spw.firefox, spw.webkit]:</span>
<span id="cb1-5">        browser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> browser_type.launch()</span>
<span id="cb1-6">        page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> browser.new_page()</span>
<span id="cb1-7">        page.goto(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://hdigital.github.io/learning-diary/"</span>)</span>
<span id="cb1-8">        page.screenshot(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"screenshot-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>browser_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.png"</span>)</span>
<span id="cb1-9">        browser.close()</span></code></pre></div>
<p>The code needs to be run in a Python script and does not run in Jupyter.</p>
<hr>
<section id="chromium-screenshot" class="level3">
<h3 class="anchored" data-anchor-id="chromium-screenshot">Chromium screenshot · 💻</h3>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-07-30-playwright/screenshot-chromium.png" class="img-fluid"></p>
</section>
<section id="firefox-screenshot" class="level3">
<h3 class="anchored" data-anchor-id="firefox-screenshot">Firefox screenshot · 💻</h3>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-07-30-playwright/screenshot-firefox.png" class="img-fluid"></p>
</section>
<section id="webkit-screenshot" class="level3">
<h3 class="anchored" data-anchor-id="webkit-screenshot">Webkit screenshot · 💻</h3>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-07-30-playwright/screenshot-webkit.png" class="img-fluid"></p>


</section>
</section>

 ]]></description>
  <category>Python</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-07-30-playwright/index.html</guid>
  <pubDate>Sat, 29 Jul 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-07-30-playwright/playwright-logo.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Package versions with renv</title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-07-29-renv/index.html</link>
  <description><![CDATA[ 




<section id="versions-snapshot" class="level2">
<h2 class="anchored" data-anchor-id="versions-snapshot">Versions snapshot</h2>
<p><code>renv::snapshot()</code> creates an <code>renv.lock</code> file that includes the versions of all R packages used in R code in the current project folder.</p>
<p>This is something I have looked for for a long time. In Python, I like to use <a href="https://pip-tools.readthedocs.io/en/latest/#requirements-from-requirements-in">pip-compile</a> to pin my dependencies to specified versions. For R, I have just not realized that <code>renv</code> can also do that without creating a full <code>renv</code> project.</p>
<p>The full <code>renv</code> workflow has seemed to me to be overhead. I prefer to create fully reproducible environments with <a href="https://rocker-project.org/">Rocker</a>.</p>
</section>
<section id="find-project-packages" class="level2">
<h2 class="anchored" data-anchor-id="find-project-packages">Find project packages</h2>
<p><code>renv::dependencies()</code> can be used to find all the packages used in a project.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(renv)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dependencies</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Source)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Finding R package dependencies ... Done!</code></pre>
</div>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Require</th>
<th style="text-align: left;">Version</th>
<th style="text-align: left;">Dev</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="even">
<td style="text-align: left;">purrr</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="odd">
<td style="text-align: left;">renv</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="even">
<td style="text-align: left;">callr</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="odd">
<td style="text-align: left;">conflicted</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rmarkdown</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="even">
<td style="text-align: left;">rmarkdown</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="even">
<td style="text-align: left;">purrr</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="odd">
<td style="text-align: left;">renv</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="even">
<td style="text-align: left;">callr</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="odd">
<td style="text-align: left;">conflicted</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
<tr class="even">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">FALSE</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Package version number can be added with some <code>tidyverse</code> magic.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dependencies</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(Package, \(.x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageVersion</span>(.x)))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(Package, version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(Package) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinct</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Finding R package dependencies ... Done!</code></pre>
</div>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: left;">Package</th>
<th style="text-align: left;">version</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">callr</td>
<td style="text-align: left;">3.7.3</td>
</tr>
<tr class="even">
<td style="text-align: left;">conflicted</td>
<td style="text-align: left;">1.2.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">dplyr</td>
<td style="text-align: left;">1.1.2</td>
</tr>
<tr class="even">
<td style="text-align: left;">purrr</td>
<td style="text-align: left;">1.0.1</td>
</tr>
<tr class="odd">
<td style="text-align: left;">renv</td>
<td style="text-align: left;">1.0.0</td>
</tr>
<tr class="even">
<td style="text-align: left;">rmarkdown</td>
<td style="text-align: left;">2.23</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="customized-session-info" class="level2">
<h2 class="anchored" data-anchor-id="customized-session-info">Customized session info</h2>
<p>This led me to a condensed version of loading all project packages before calling <code>sessionInfo()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">conflicted<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">conflicts_prefer</span>(callr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>run)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dependencies</span>(), Package), require)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Finding R package dependencies ... Done!</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sessionInfo</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: x86_64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.4.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/Berlin
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] rmarkdown_2.23   conflicted_1.2.0 callr_3.7.3      renv_1.0.0      
[5] purrr_1.0.1      dplyr_1.1.2     

loaded via a namespace (and not attached):
 [1] vctrs_0.6.3       cli_3.6.1         knitr_1.43        rlang_1.1.1      
 [5] xfun_0.39         processx_3.8.2    generics_0.1.3    jsonlite_1.8.7   
 [9] glue_1.6.2        htmltools_0.5.5   ps_1.7.5          fansi_1.0.4      
[13] evaluate_0.21     tibble_3.2.1      fastmap_1.1.1     yaml_2.3.7       
[17] lifecycle_1.0.3   memoise_2.0.1     compiler_4.3.1    htmlwidgets_1.6.2
[21] pkgconfig_2.0.3   rstudioapi_0.15.0 digest_0.6.33     R6_2.5.1         
[25] tidyselect_1.2.0  utf8_1.2.3        pillar_1.9.0      magrittr_2.0.3   
[29] tools_4.3.1       withr_2.5.0       cachem_1.0.8     </code></pre>
</div>
</div>
<hr>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-07-29-renv/lock-unsplash.jpg" class="img-fluid"></p>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-07-29-renv/index.html</guid>
  <pubDate>Fri, 28 Jul 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-07-29-renv/renv-logo.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-07-16 r4ds-pr/index.html</link>
  <description><![CDATA[ 



<section id="first-pull-request-accepted" class="level1">
<h1>First pull request accepted · 😊</h1>
<p>My first public pull request on Github was <a href="https://github.com/hadley/r4ds/pull/1525">accepted</a>.</p>
<p>Over the last weeks, I have been reading <a href="https://r4ds.hadley.nz/">R for Data Science (2e)</a> (R4DS). The first edition really helped me to get deeply into the <a href="https://www.tidyverse.org/">tidyverse</a>. So I was interested in the content of the second edition.</p>
<p>At some point, I realized that the book used an older parameter in <code>case_when()</code> that was recently superseded in <a href="https://www.tidyverse.org/blog/2023/02/dplyr-1-1-0-vctrs/#case_when">dplyr 1.1</a>. Since, I had switched to the new <code>.default</code> parameter already, I thought that it may be a small and valuable contribution to update the section.</p>
<p>Making the code changes was easy. It took me a little to find out how to clone the project and submit the pull requests. The GitHub documentation was helpful and it went smoothly following it.</p>
<p>I have used R4DS and the tidyverse so often that I am quite proud about my very minor addition to it.</p>
<hr>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-07-16 r4ds-pr/r4ds-pr.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>R</category>
  <category>git</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-07-16 r4ds-pr/index.html</guid>
  <pubDate>Sat, 15 Jul 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-07-16 r4ds-pr/git-pr.png" medium="image" type="image/png" height="115" width="144"/>
</item>
<item>
  <title>Today I learned (TIL)</title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-til/index.html</link>
  <description><![CDATA[ 




<!--- I keep brief information here. Mainly things I learned that don't create a post. -->
<section id="june" class="level2">
<h2 class="anchored" data-anchor-id="june">30. June</h2>
<p>Set <a href="https://quarto.org/docs/computations/r.html#data-frames">default printing</a> function for data frames in Quarto notebook with html option <code>df-print: kable</code>.</p>
<p>Useful to have html tables instead of monospace tables in notebooks.</p>
<p>So far, I prefer <code>kable</code> (<code>knitr::kable()</code>) over <code>paged</code> (<code>rmarkdown::paged_table())</code>).</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Document"</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">   </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">     </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df-print</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kable</span></span>
<span id="cb1-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
</section>
<section id="june-1" class="level2">
<h2 class="anchored" data-anchor-id="june-1">29. June</h2>
<p>Didn’t know <a href="https://dplyr.tidyverse.org/reference/n_distinct.html">n_distinct()</a> and used <code>length(unique())</code> for too long. A small and nice thing i learned that makes pipes more readable.</p>
</section>
<section id="june-2" class="level2">
<h2 class="anchored" data-anchor-id="june-2">13. June</h2>
<p>Adding a comment in Markdown by using standard html comments. It works for Markdown in <a href="https://pandoc.org/MANUAL.html">pandoc</a> used by Quarto.</p>
<pre><code>&lt;!--- comment  --&gt;

&lt;!---
multi-line
comments
--&gt;</code></pre>
<p>I used it now with the current TIL page to have a short intro about a new TIL on the landing page. The previous one sentence summary of the page is now a comment.</p>
</section>
<section id="june-3" class="level2">
<h2 class="anchored" data-anchor-id="june-3">10. June</h2>
<p>Adding a <a href="https://quarto.org/docs/authoring/article-layout.html#page-breaks">page break</a> to a pdf in Quarto.</p>
<div class="sourceCode" id="cb3" data-shortcodes="false" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb3-2"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">format:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> pdf</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">Page 1</span>
<span id="cb3-6"></span>
<span id="cb3-7">{{&lt; pagebreak &gt;}}</span>
<span id="cb3-8"></span>
<span id="cb3-9">Page 2</span></code></pre></div>
<p>In addition, I learned to ignore shortcuts in a cell with <code>{.markdown shortcodes="false"}</code></p>
</section>
<section id="june-4" class="level2">
<h2 class="anchored" data-anchor-id="june-4">9. June</h2>
<p>I wanted to run a <a href="">Bash</a> shell script from any folder. The initial solution worked on my local computer but not on GitHub Codespaces. Here is the solution I came up with. The script runs from any location or stops and gives a message that it should be run from the script folder.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use path relative to script location, if feasible</span></span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-n</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$BASH_SOURCE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb4-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dirname</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${BASH_SOURCE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pwd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-P</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span></span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">! </span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package-lock.json"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb4-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Run script in project folder"</span></span>
<span id="cb4-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb4-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span>
<span id="cb4-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span></code></pre></div>
</section>
<section id="may" class="level2">
<h2 class="anchored" data-anchor-id="may">17. May</h2>
<p>Another use of the Base-R shorthand anonymous function and explaining it to a colleague. I like to use <code>.x</code> now for the local variable name to make the local context more explicit.</p>
<p><code>add_three &lt;- \(.x) .x+3</code></p>
</section>
<section id="may-1" class="level2">
<h2 class="anchored" data-anchor-id="may-1">6. May</h2>
<p>Excluding variables in <em>tidyselect</em> is now done with <code>!</code> as I found out by reading the <a href="https://tidyselect.r-lib.org/reference/language.html">documentation</a> more carfully. I have still used <code>-</code> to exclude variables by their name. This is not documented in the tidyselect help page anymore.</p>
<p><a href="https://github.com/sjewo/readstata13">readstata13</a> creates more R friendly data structures than <a href="https://haven.tidyverse.org/">haven</a>. Its default option converts labeled data into factors if appropriate.</p>
</section>
<section id="may-2" class="level2">
<h2 class="anchored" data-anchor-id="may-2">5. May</h2>
<p>Used <a href="https://quarto.org/">Quarto</a> a lot and got more comfortable with the options — esp.&nbsp;caching, creating pdf, figures.</p>
</section>
<section id="may-3" class="level2">
<h2 class="anchored" data-anchor-id="may-3">3. May</h2>
<p>Convert an RMarkdown file into an R file with <code>knitr::purl("purl.Rmd")</code> – see <a href="https://bookdown.org/yihui/rmarkdown-cookbook/purl.html">details</a>.</p>
<p>ChatGPT did not provide the solution. I remembered doing this years ago. An internet search quickly led to the information needed.</p>
</section>
<section id="may-4" class="level2">
<h2 class="anchored" data-anchor-id="may-4">2. May</h2>
<p>A <a href="https://github.com/rstudio/rstudio/issues/12452">bug</a> in the current version of RStudio kept me busy. I reinstalled R and RStudio on Windows, but RStudio did not find the new R version afterwards. So I reinstalled the two and it kept not working. Fortunately, I found information about the RStudio bug somewhat quickly. I installed the <a href="https://dailies.rstudio.com/rstudio/mountain-hydrangea/">daily build</a> and had R/RStudio running again.</p>
<p>Originally, I only wanted to do a quick data analysis but my previous R/RStudio updates came in between.</p>
</section>
<section id="apr." class="level2">
<h2 class="anchored" data-anchor-id="apr.">25. Apr.</h2>
<p>I got back into <a href="https://quarto.org/">Quarto</a> and created a website for a learning project I have started. My goal is to have some structured information about topics of a book I am reading and some code snippets that apply concepts of the book.</p>
<p>Setting up the page worked well. I got a little confused by the quarto difference between <em>freeze</em> and <em>cache</em>. I also wondered why the <em>cache</em> was added into several folders in the main directory and not into a <em>_cache</em> folder.</p>
</section>
<section id="apr.-1" class="level2">
<h2 class="anchored" data-anchor-id="apr.-1">3. Apr.</h2>
<p>I read about the new <a href="https://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html">pandas release</a>. None of the changes seem to be relevant for my work with <em>pandas</em></p>
</section>
<section id="feb." class="level2">
<h2 class="anchored" data-anchor-id="feb.">25. Feb.</h2>
<p>I worked on <a href="https://github.com/hdigital/mixtape">code</a> from a causal inference book. It includes Stata, R and Python versions of the examples.</p>
<p>For R and Python I wanted to have one environment to install all dependencies. This led me to <a href="https://docs.conda.io/projects/conda/en/stable/user-guide/getting-started.html">conda</a>.</p>
<p>Creating a new conda environment in a new file was extremly slow. It also took me a while to fully configure Jupyter Lab with Python and R.</p>
<p>At the end, VS Code seems to be the more convenient interface.</p>
<hr>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-til/computer_ai.png" class="img-fluid" width="300"></p>


</section>

 ]]></description>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-til/index.html</guid>
  <pubDate>Fri, 30 Jun 2023 08:27:37 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-til/computer_ai.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>dplyr programming</title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-06-30-dplyr-programming/index.html</link>
  <description><![CDATA[ 




<p>I wanted to use some dynamic variable names in dplyr and had to look up <a href="https://dplyr.tidyverse.org/articles/programming.html">dplyr programming</a> again.</p>
<p>This is something I have to look up regularly and where I am still not comfortable with the terminology. Here, I find the respective tidyverse documentation rather challenging. However, dplyr programming is also something that I use rarely.</p>
<p>So here is a brief summary of my recent exploration of the topic.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"></span>
<span id="cb1-3">cars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mtcars)</span>
<span id="cb1-4">var_select <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span></span></code></pre></div>
</div>
<section id="pronoun-.data" class="level2">
<h2 class="anchored" data-anchor-id="pronoun-.data">Pronoun .data</h2>
<p>Use the <code>.data</code> pronoun to access a variable name in a character object in a dplyr workflow.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">cars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(.data[[var_select]])</span></code></pre></div>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">cyl</th>
<th style="text-align: right;">n</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">4</td>
<td style="text-align: right;">11</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: right;">7</td>
</tr>
<tr class="odd">
<td style="text-align: right;">8</td>
<td style="text-align: right;">14</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">cars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(.data[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>]])</span></code></pre></div>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">cyl</th>
<th style="text-align: right;">n</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">4</td>
<td style="text-align: right;">11</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: right;">7</td>
</tr>
<tr class="odd">
<td style="text-align: right;">8</td>
<td style="text-align: right;">14</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="embrace-argument" class="level2">
<h2 class="anchored" data-anchor-id="embrace-argument">Embrace argument</h2>
<p>A variable used as a function argument can be <em>embraced</em> with double braces to use it in a dplyr workflow.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">count_var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(.dt, .var) {</span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.dt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>({{ .var }}))</span>
<span id="cb4-3">}</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count_var</span>(cars, var_select)</span></code></pre></div>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">cyl</th>
<th style="text-align: right;">n</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">6</td>
<td style="text-align: right;">7</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">11</td>
</tr>
<tr class="odd">
<td style="text-align: right;">8</td>
<td style="text-align: right;">14</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count_var</span>(cars, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(var_select, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vs"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">cyl</th>
<th style="text-align: right;">vs</th>
<th style="text-align: right;">n</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">6</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">10</td>
</tr>
<tr class="odd">
<td style="text-align: right;">6</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">4</td>
</tr>
<tr class="even">
<td style="text-align: right;">8</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">14</td>
</tr>
<tr class="odd">
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="name-injection" class="level2">
<h2 class="anchored" data-anchor-id="name-injection">Name injection</h2>
<p>Name injection can be used to assign new variable names in a dplyr workflow.</p>
<p><code>:=</code> is used as the assignment operator with dynamic new variable names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">cars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{var_select}_count"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb6-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>({{ var_select }})</span>
<span id="cb6-4">    )</span></code></pre></div>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">cyl</th>
<th style="text-align: right;">cyl_count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">6</td>
<td style="text-align: right;">7</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">11</td>
</tr>
<tr class="odd">
<td style="text-align: right;">8</td>
<td style="text-align: right;">14</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">count_var2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(dt, var) {</span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(dt, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{var}_count"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb7-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>({{ var }})</span>
<span id="cb7-4">    )</span>
<span id="cb7-5">}</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count_var2</span>(cars, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">cyl</th>
<th style="text-align: right;">cyl_count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">6</td>
<td style="text-align: right;">7</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">11</td>
</tr>
<tr class="odd">
<td style="text-align: right;">8</td>
<td style="text-align: right;">14</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">count_var3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(dt, var) {</span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(dt, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{var}}_count"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb8-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>({{ var }})</span>
<span id="cb8-4">    )</span>
<span id="cb8-5">}</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count_var3</span>(cars, var_select)</span></code></pre></div>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">cyl</th>
<th style="text-align: right;">var_select_count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">6</td>
<td style="text-align: right;">7</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">11</td>
</tr>
<tr class="odd">
<td style="text-align: right;">8</td>
<td style="text-align: right;">14</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">summarise_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, var) {</span>
<span id="cb9-2">    data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb9-4">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_{{var}}"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>({{ var }}),</span>
<span id="cb9-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum_{{var}}"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>({{ var }}),</span>
<span id="cb9-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_{{var}}"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()</span>
<span id="cb9-7">        )</span>
<span id="cb9-8">}</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_dt</span>(cars, cyl)</span></code></pre></div>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<thead>
<tr class="header">
<th style="text-align: right;">mean_cyl</th>
<th style="text-align: right;">sum_cyl</th>
<th style="text-align: right;">n_cyl</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">6.1875</td>
<td style="text-align: right;">198</td>
<td style="text-align: right;">32</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<hr>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-06-30-dplyr-programming/dplyr-logo.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-06-30-dplyr-programming/index.html</guid>
  <pubDate>Thu, 29 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-06-30-dplyr-programming/dplyr-logo.png" medium="image" type="image/png" height="166" width="144"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-06-24-str-glue/index.html</link>
  <description><![CDATA[ 



<section id="string-interpolation-with-str_glue" class="level1">
<h1>string interpolation with str_glue()</h1>
<p>In R, I like string interpolation with <a href="https://glue.tidyverse.org/">glue</a> and prefer it over Base-R <code>paste(), paste0(), sprintf()</code>. Regularly, I use <code>glue()</code> and forget to load the respective library at the top of the script or find <code>glue::glue()</code> rather verbose.</p>
<p>A tidyverse <a href="https://www.tidyverse.org/blog/2023/05/purrr-walk-this-way/">blog post</a> made me realize that <a href="https://stringr.tidyverse.org/">stringr</a> includes a <code>str_glue()</code> function that wraps <code>glue()</code>. stringr is loaded with <code>library(tidyverse)</code> so that I can include it into my regular tidyverse workflow.</p>
<p>It is also documented on the <a href="https://github.com/rstudio/cheatsheets/blob/main/strings.pdf">stringr cheatsheet</a>, but I have not relized that. It serves as useful reminder to look at the <a href="https://rstudio.github.io/cheatsheets/">Posit Cheatsheets</a> more regularly to review and update my workflow.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"></span>
<span id="cb1-3">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jane"</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hi {name}. How are you?"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hi Jane. How are you?</code></pre>
</div>
</div>
<hr>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-06-24-str-glue/tidyverse-glue.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-06-24-str-glue/index.html</guid>
  <pubDate>Fri, 23 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-06-24-str-glue/tidyverse-glue.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-06-20-r-cell-conditional/index.html</link>
  <description><![CDATA[ 



<section id="conditional-r-cells" class="level1">
<h1>Conditional R cells</h1>
<p>For R notebooks in Quarto not all information that can be presented in an html-document is feasible for the respective pdf-document. So sometimes, I want to include information in html but not in the pdf.</p>
<p>Interactive data tables with <a href="https://glin.github.io/reactable/">reactable</a> are an example. They allow to explore smaller data sets quickly within a notebook, but work only in html documents. A pdf simply fails to render with Quarto.</p>
<p>So I was looking for a solution to execute R code in a notebook only for the html-document but not the pdf.</p>
<p>Conditional chunk execution is not implemented in Quarto so far — see <a href="https://github.com/quarto-dev/quarto-cli/discussions/3260">ticket #3260</a>.</p>
<p>However, for R I found an approach that is working well.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_html_output</span>()) {</span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"code block run"</span>)</span>
<span id="cb1-3">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "code block run"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_html_output</span>()) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"code block not run"</span>)</span>
<span id="cb3-3">}</span></code></pre></div>
</div>
<hr>
<p>An example for a notebook with a dynamic table in a <a href="../../snippets/r-cell-conditional.html">html document</a> and a static table in the <a href="../../snippets/r-cell-conditional.pdf">pdf document</a></p>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-06-20-r-cell-conditional/r-cell-conditional.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>R</category>
  <category>Quarto</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-06-20-r-cell-conditional/index.html</guid>
  <pubDate>Mon, 19 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-06-20-r-cell-conditional/r-cell-conditional.png" medium="image" type="image/png" height="88" width="144"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-06-17-git-rebase/index.html</link>
  <description><![CDATA[ 



<section id="git-rebase-interactive" class="level1">
<h1>Git rebase interactive</h1>
<p>Git rebase interactive is nice. I have used Git for a long time and correcting wrong commits has been a hassle so far. I try to keep a nice Git history and pay attention to details in Git commits. Merge conflicts and rebasing in Git have so far been challenging to me and I run regular into conflicts.</p>
<p>So today I was pleasently surprised how well interactive rebasing in Git works. Here is the magic message:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> rebase <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> HEAD~5</span></code></pre></div>
<p>Revising the commit history in a text editor worked really well.</p>
<hr>
<pre><code>pick c86752b Use date last modified for TIL post
pick faa548f Add post Jupyter notebooks in Git
pick 86096fa Add TIL Markdown comments
pick a682d0d Add codespace init script
pick c993202 Add VS Code settings

# Rebase 22b5523..c993202 onto 22b5523 (5 commands)
#
# Commands:
# p, pick &lt;commit&gt; = use commit
# r, reword &lt;commit&gt; = use commit, but edit the commit message
# e, edit &lt;commit&gt; = use commit, but stop for amending
# s, squash &lt;commit&gt; = use commit, but meld into previous commit
# f, fixup [-C | -c] &lt;commit&gt; = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec &lt;command&gt; = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop &lt;commit&gt; = remove commit
# l, label &lt;label&gt; = label current HEAD with a name
# t, reset &lt;label&gt; = reset HEAD to a label
# m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c &lt;commit&gt; to reword the commit message
# u, update-ref &lt;ref&gt; = track a placeholder for the &lt;ref&gt; to be updated
#                       to this position in the new commits. The &lt;ref&gt; is
#                       updated at the end of the rebase
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#</code></pre>
<hr>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-06-17-git-rebase/git-logo.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>git</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-06-17-git-rebase/index.html</guid>
  <pubDate>Fri, 16 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-06-17-git-rebase/git-logo.png" medium="image" type="image/png" height="60" width="144"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-06-12-nbdev-clean/index.html</link>
  <description><![CDATA[ 



<section id="jupyter-notebooks-in-git" class="level1">
<h1>Jupyter notebooks in Git</h1>
<p>Working with Jupyter notebooks in Git repositories has always caused some struggles for me with the Git commit history. Jupyter notebooks use the json-format and include some metadata such as the number of times a notebook has been run. So far, I have just cleared the output restarted and run notebooks once to have somewhat clean metadata. This has not always worked and let to some slightly noisy git commits.</p>
<p>Now, I have tried a solution that I remembered when I wanted to commit a Jupyter notebook and run into noisy git diffs again. <a href="https://nbdev.fast.ai/tutorials/git_friendly_jupyter.html">nbdev_clean</a> removes cell execution related metadata from a notebook.</p>
<p><code>nbdev_clean --fname .</code> cleans all Juypter notebooks in a repository. I run it on this <em>learning diary</em> Git repository to clean the two notebooks in the <em>snippets</em> folder. I also used it in the project that initially caused me to look into <em>nbdev</em>.</p>
<p>Finally, i used Codespaces to quickly create minimal, reproducible examples of git diffs without and with <code>nbdev_clean</code>. Again, Codespaces are really nice.</p>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-06-12-nbdev-clean/notebook-clean-no.png" class="img-fluid"></p>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-06-12-nbdev-clean/notebook-clean-yes.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>Python</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-06-12-nbdev-clean/index.html</guid>
  <pubDate>Sun, 11 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-06-12-nbdev-clean/jupyter-logo.png" medium="image" type="image/png" height="161" width="144"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-06-04-codespaces/index.html</link>
  <description><![CDATA[ 



<section id="github-codespaces" class="level1">
<h1>GitHub Codespaces</h1>
<p>GitHub offered me to review the code of a pull request in <a href="https://github.com/features/codespaces">GitHub Codespaces</a>. It is an environment to run code online. I used it briefly before but not for one of my GitHub repositories. Today, I gave it a try for the pull request of a repository.</p>
<p>For the pull request, it created an environment with VS Code as the IDE and included Python as well as Git. I used it for a small Django project of mine. Two things were required to run my code. First, I needed to install the Python packages used by the project. The project includes a requirements file with pinned versions so that installing the dependencies was easy. Second, it asked me to add some VS Code extensions which I did as well.</p>
<p>Completing these two steps allowed me to work in an online enviroment very similiar to my local VS Code set up. It was linked to the GitHub repository so that I could sync my cloud changes with the project. I was impressed how smoothly it went and how little configuration it required.</p>
<p>I made some minor modifications to the project to use Codespaces even more effortlessly in the future. First, I updated my <code>settings.json.example</code> so that I can quickly create a copy in a Codesspaces <code>settings.json</code> that includes my settings. Second, I specified the VS Code extensions I am regularly using in a <code>launch.json</code>. These two additions should allow me to work in new Codespaces in the future even more quickly.</p>
<p>Overall, I really liked my first more in depth usage of Codespaces and plan to use it more in the future. I have yet to figure out how much I can use it with free quota and what monthly costs may occur by using it more regularly.</p>
<hr>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-06-04-codespaces/codespace-hd.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>cloud</category>
  <category>Python</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-06-04-codespaces/index.html</guid>
  <pubDate>Sat, 03 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-06-04-codespaces/codespaces-logo.png" medium="image" type="image/png" height="145" width="144"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-06-03-github-pages/index.html</link>
  <description><![CDATA[ 



<section id="github-pages" class="level1">
<h1>GitHub Pages</h1>
<p>I published my first two web sites with <a href="https://pages.github.com/">GithHub Pages</a>.</p>
<ul>
<li><a href="https://hdigital.github.io/learning-diary/">learning diary</a></li>
<li><a href="https://hdigital.github.io/data-snippets/">data snippets</a></li>
</ul>
<p>Quarto has a <a href="https://quarto.org/docs/publishing/github-pages.html">tutorial</a> about publishing Quarto sites to GitHub Pages. This worked well.</p>
<p>I was a little confused by the different options: docs folder, publish command, GitHub Actions.</p>
<p>The <code>quarto publish</code> command worked well for the <a href="https://hdigital.github.io/learning-diary/">learning diary</a> page. I like that you can publish a page with a command instead of deploying the page with every GitHub push.</p>
<p>For the <a href="https://hdigital.github.io/data-snippets/">data snippets</a> page I used the <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#publishing-with-a-custom-github-actions-workflow">GitHub Actions</a> approach. In the project, I have a static page in a subfolder with a Quarto based single index page. So neither the Quarto nor the default GitHub Pages workflow to publish the page seemed to fit well. In the GitHub Actions approach I chose, the page is deployed with every GitHub push.</p>
<hr>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-06-03-github-pages/github-pages.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>Quarto</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-06-03-github-pages/index.html</guid>
  <pubDate>Fri, 02 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-06-03-github-pages/github-pages.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-06-02-dalle-ai-images/index.html</link>
  <description><![CDATA[ 



<section id="ai-images-with-dall-e" class="level1">
<h1>AI images with DALL-E</h1>
<p>Today, I became aware of an OpenAI service to generate images — <a href="https://labs.openai.com/">DALL-E</a>.</p>
<p>This has worked well and may solve my issue of needing images for blog posts, readme documents, and other content. I like having visual elements in writings and presentations.</p>
<p>Sometimes, images from <a href="https://commons.wikimedia.org/wiki/Main_Page">Wikimedia Commons</a> worked well. It often took some time to find nice images. DALL-E may be a quicker approach to get an image.</p>
<p>I had to pay for the service but the number of images that can be generated for 15$ seem to be resonable.</p>
<p>I have still to twist the art styles to results that I like.</p>
<hr>
<p>Here are some examples.</p>
<p>“a man working on a computer – style Pieter Bruegel the Elder”</p>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-06-02-dalle-ai-images/bruegel_ai.png" class="img-fluid"></p>
<p>“a working class man on a computer – leipzig school art style”</p>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-06-02-dalle-ai-images/leipzig-school_ai.png" class="img-fluid"></p>
<p>“A comic book cover of a superhero working on a computer doing data analysis”</p>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-06-02-dalle-ai-images/comic-cover_ai.png" class="img-fluid"></p>
<p>“a man working on a computer – style 3d art”</p>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-06-02-dalle-ai-images/3d-art_ai.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>AI</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-06-02-dalle-ai-images/index.html</guid>
  <pubDate>Thu, 01 Jun 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-06-02-dalle-ai-images/leipzig-school_ai.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Wikipedia, Python, ChatGPT</title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-05-01-wikipedia-data/index.html</link>
  <description><![CDATA[ 




<p>I wanted to get the first image of a Wikipedia page and the coordinates.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-05-01-wikipedia-data/wikipedia-berlin.png" class="img-fluid figure-img" style="width:40.0%"></p>
</figure>
</div>
<p>ChatGPT was very helpful here as well.</p>
<p>The code ChatGPT provided worked with the examples it used. I made only some small adjustments to the code below.</p>
<section id="image" class="level2">
<h2 class="anchored" data-anchor-id="image">Image</h2>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb1-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wikipedia</span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>:</span>
<span id="cb1-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> pip install wikipedia</span></code></pre></div>
</details>
</div>
<p>ChatGPT added comments to every line of the code. I combined them into blocks to make the snippet more concise.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urllib</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wikipedia</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the Wikipedia page title and get page</span></span>
<span id="cb2-9">page_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Berlin"</span></span>
<span id="cb2-10">page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wikipedia.page(page_title)</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get html content of page and parse it with BeautifulSoup</span></span>
<span id="cb2-13">html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> page.html()</span>
<span id="cb2-14">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(html, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html.parser"</span>)</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the infobox image element and get url image</span></span>
<span id="cb2-17">image_element <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table"</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"infobox"</span>).find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"img"</span>)</span>
<span id="cb2-18">image_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https:"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> image_element[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src"</span>]</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the image</span></span>
<span id="cb2-21">urllib.request.urlretrieve(image_url, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image.jpg'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>('image.jpg', &lt;http.client.HTTPMessage at 0x7fcaf7f8cb50&gt;)</code></pre>
</div>
</div>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-05-01-wikipedia-data/image.jpg" class="img-fluid"></p>
</section>
<section id="coordinates" class="level2">
<h2 class="anchored" data-anchor-id="coordinates">Coordinates</h2>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function to get the coordinates from the infobox of a Wikipedia article</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_coordinates(title):</span>
<span id="cb4-6">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/w/api.php"</span></span>
<span id="cb4-7">    params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"action"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span>,</span>
<span id="cb4-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prop"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coordinates"</span>,</span>
<span id="cb4-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"titles"</span>: title,</span>
<span id="cb4-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"format"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json"</span>,</span>
<span id="cb4-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"formatversion"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-13">    }</span>
<span id="cb4-14">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb4-15">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.text)</span>
<span id="cb4-16">    pages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pages"</span>]</span>
<span id="cb4-17">    coordinates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> page <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pages:</span>
<span id="cb4-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coordinates"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> page:</span>
<span id="cb4-20">            coordinates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> page[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coordinates"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb4-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> coordinates</span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># example usage</span></span>
<span id="cb4-25">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Berlin"</span></span>
<span id="cb4-26">coordinates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_coordinates(title)</span>
<span id="cb4-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(coordinates[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>], coordinates[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>52.52 13.405</code></pre>
</div>
</div>
</section>
<section id="map" class="level2">
<h2 class="anchored" data-anchor-id="map">Map</h2>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium</span>
<span id="cb6-2"></span>
<span id="cb6-3">map_coord <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [coordinates[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lat'</span>], coordinates[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lon'</span>]]</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the map</span></span>
<span id="cb6-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>map_coord, zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>)</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add a marker at the location</span></span>
<span id="cb6-9">folium.Marker(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>map_coord, popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>title).add_to(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>)</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># display the map</span></span>
<span id="cb6-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_c1d217a1f70f6cbcee4820c9e36447fa {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_c1d217a1f70f6cbcee4820c9e36447fa&quot; ></div>
        
</body>
<script>
    
    
            var map_c1d217a1f70f6cbcee4820c9e36447fa = L.map(
                &quot;map_c1d217a1f70f6cbcee4820c9e36447fa&quot;,
                {
                    center: [52.52, 13.405],
                    crs: L.CRS.EPSG3857,
                    zoom: 3.5,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_0a20780bf7f8742629a75585a0c691a7 = L.tileLayer(
                &quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;Data by \u0026copy; \u003ca target=\&quot;_blank\&quot; href=\&quot;http://openstreetmap.org\&quot;\u003eOpenStreetMap\u003c/a\u003e, under \u003ca target=\&quot;_blank\&quot; href=\&quot;http://www.openstreetmap.org/copyright\&quot;\u003eODbL\u003c/a\u003e.&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 18, &quot;maxZoom&quot;: 18, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            ).addTo(map_c1d217a1f70f6cbcee4820c9e36447fa);
        
    
            var marker_547db7a7e0ff7d508323000445aa53d3 = L.marker(
                [52.52, 13.405],
                {}
            ).addTo(map_c1d217a1f70f6cbcee4820c9e36447fa);
        
    
        var popup_c1dc49339182c7d2083aab6a485206b3 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_bea47ea6735fe3df4fce2b36fc97b652 = $(`<div id=&quot;html_bea47ea6735fe3df4fce2b36fc97b652&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Berlin</div>`)[0];
                popup_c1dc49339182c7d2083aab6a485206b3.setContent(html_bea47ea6735fe3df4fce2b36fc97b652);
            
        

        marker_547db7a7e0ff7d508323000445aa53d3.bindPopup(popup_c1dc49339182c7d2083aab6a485206b3)
        ;

        
    
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <category>AI</category>
  <category>geo</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-05-01-wikipedia-data/index.html</guid>
  <pubDate>Sun, 30 Apr 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-05-01-wikipedia-data/wikipedia-berlin.png" medium="image" type="image/png" height="135" width="144"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-04-27-posit-cloud/index.html</link>
  <description><![CDATA[ 



<section id="posit-cloud" class="level1">
<h1>Posit Cloud</h1>
<p>I use RStudio in <a href="https://posit.cloud/">Posit Cloud</a> sometimes. It is a convenient solution on a Chromebook or on a computer where R/RStudio is not installed. I also like to use it for mini-project that I work on from different machines.</p>
<p>Over the last days, I used it a little more. One goal was to figure out how a more extensive use would work out.</p>
<p>This worked out well. I like just opening a browser and start working with R in RStudio. Especially, a Chrome browser with the tab in full screen mode works very well. It almost feels like working on a desktop application.</p>
<p>Working in Posit Cloud, I am still struggling slightly with two issues.</p>
<p>First, not all shortcuts work the way I am used to from the RStudio desktop application. Some browser shortcuts take precedence over RStudio shortcuts. Showing the <em>command pallete</em> works. So I can use it to run a command from the keyboard. However, I am just used to some shortcuts that I am irritated if typing them does not lead to the expected next step working in RStudio.</p>
<p>Second, I find the file handling still a little inconvenient. Uploading a file into to project folder or moving files across project folders takes some steps and mulitple clicks. Here, the Posit Cloud interface to RStudio is just not as reactive as for example file handling in Google Drive.</p>
<p>Using RStudio with Posit Cloud regularly remains a regular part of my data science tools.</p>
<p>Actually, this time I used it so extensivly that I exceeded the free quota of my account. So I have to wait for a while until I can start using it again.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-04-27-posit-cloud/posit-cloud.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Posit Cloud limit</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>cloud</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-04-27-posit-cloud/index.html</guid>
  <pubDate>Wed, 26 Apr 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-04-27-posit-cloud/posit-cloud.png" medium="image" type="image/png" height="209" width="144"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-04-26-dataverse/index.html</link>
  <description><![CDATA[ 



<section id="dataverse-urls" class="level1">
<h1>Dataverse URLs</h1>
<p>I followed a talk on electoral politics in Honduras. The presenter referred to the very stable two party system in Honduras. That made me interested to look at election results in Honduras. A quick analysis with <a href="https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/OGOURC">Elections Global</a> gave a good overview – see below.</p>
<p>The technical point is that I wanted to access the original data file at the <a href="https://dataverse.harvard.edu/">Harvard Dataverse</a>.</p>
<p>Data uploaded to the Dataverse is imported and a tab separated data version of the imported data is provided by the Dataverse. This is not the original file and may include some import errors. I ran into the issue in previous work so that I have worked with the original data file from the Dataverse. However, there is no direct link available at the Dataverse page of a data file.</p>
<p>Here is an example for the Elections Global data used in the snippet – see page screenshot below.</p>
<p><a href="https://dataverse.harvard.edu/file.xhtml?persistentId=doi:10.7910/DVN/OGOURC/YK9DOZ&amp;version=2.0">doi:10.7910/DVN/OGOURC/YK9DOZ&amp;version=2.0</a></p>
<p>So I tried to find the permanent link to the original data file.</p>
<p>First, I checked the documentation of the Dataverse API but could not find a way to access an original data file through API parameters. Only the imported file is available through the API.</p>
<p>Second, I got the link by checking the request from clicking on the respective dynamic button at the Dataverse page with the browser developer tools. However, this url does not seem to have a structure that is related to the identifier of the dataset. Getting the url of the original data file this way is cumbersome.</p>
<p>For now, I will start to using the imported data version with the provided url for data files from the Dataverse.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(conflicted)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">conflicts_prefer</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>filter)</span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb2-2">  url_csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://dataverse.harvard.edu/api/access/datafile/3754546?format=original"</span></span>
<span id="cb2-3">  elec_raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(url_csv)</span>
<span id="cb2-4">}</span>
<span id="cb2-5"></span>
<span id="cb2-6">url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://dataverse.harvard.edu/api/access/datafile/:persistentId?persistentId=doi:10.7910/DVN/OGOURC/YK9DOZ"</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elec_raw"</span>)) {</span>
<span id="cb2-9">  elec_raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_tsv</span>(url)</span>
<span id="cb2-10">}</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># glimpse(elec_raw)</span></span></code></pre></div>
</div>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">hnd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb3-2">  elec_raw <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HND"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb3-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(election_date, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)),</span>
<span id="cb3-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seats_share =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> seats <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> seats_total</span>
<span id="cb3-7">  )</span>
<span id="cb3-8"></span>
<span id="cb3-9">hnd <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb3-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb3-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">share_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(seats_share, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">share_max =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(seats_share, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year_first =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(year, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb3-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year_last =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(year, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb3-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> party</span>
<span id="cb3-17">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(party, n, n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>year_last) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(share_mean))</span></code></pre></div>
</details>
<div class="cell-output-display">
<div class="kable-table">
<table class="table table-sm table-striped small">
<colgroup>
<col style="width: 49%">
<col style="width: 3%">
<col style="width: 12%">
<col style="width: 11%">
<col style="width: 12%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">party</th>
<th style="text-align: right;">n</th>
<th style="text-align: right;">share_mean</th>
<th style="text-align: right;">share_max</th>
<th style="text-align: right;">year_first</th>
<th style="text-align: right;">year_last</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">National Party of Honduras</td>
<td style="text-align: right;">25</td>
<td style="text-align: right;">60.8</td>
<td style="text-align: right;">100.0</td>
<td style="text-align: right;">1923</td>
<td style="text-align: right;">2013</td>
</tr>
<tr class="even">
<td style="text-align: left;">Liberal Party of Honduras</td>
<td style="text-align: right;">20</td>
<td style="text-align: right;">40.3</td>
<td style="text-align: right;">62.1</td>
<td style="text-align: right;">1923</td>
<td style="text-align: right;">2013</td>
</tr>
<tr class="odd">
<td style="text-align: left;">other (other-script)</td>
<td style="text-align: right;">13</td>
<td style="text-align: right;">4.0</td>
<td style="text-align: right;">9.4</td>
<td style="text-align: right;">1923</td>
<td style="text-align: right;">2013</td>
</tr>
<tr class="even">
<td style="text-align: left;">Liberal Constitutionalist Party of Honduras</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">71.4</td>
<td style="text-align: right;">100.0</td>
<td style="text-align: right;">1916</td>
<td style="text-align: right;">1923</td>
</tr>
<tr class="odd">
<td style="text-align: left;">National Reformist Movement</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">13.6</td>
<td style="text-align: right;">20.3</td>
<td style="text-align: right;">1954</td>
<td style="text-align: right;">1957</td>
</tr>
<tr class="even">
<td style="text-align: left;">Liberty and Refoundation</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">28.9</td>
<td style="text-align: right;">28.9</td>
<td style="text-align: right;">2013</td>
<td style="text-align: right;">2013</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Anti-Corruption Party</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">10.2</td>
<td style="text-align: right;">10.2</td>
<td style="text-align: right;">2013</td>
<td style="text-align: right;">2013</td>
</tr>
<tr class="even">
<td style="text-align: left;">Central American Unionist Party</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">8.7</td>
<td style="text-align: right;">8.7</td>
<td style="text-align: right;">1926</td>
<td style="text-align: right;">1926</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Democratic Unification Party</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">3.9</td>
<td style="text-align: right;">3.9</td>
<td style="text-align: right;">2005</td>
<td style="text-align: right;">2005</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">hnd <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> party) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(year, seats_share, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> party)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-04-26-dataverse/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<hr>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-04-26-dataverse/dataverse-url.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-04-26-dataverse/index.html</guid>
  <pubDate>Wed, 26 Apr 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-04-26-dataverse/dataverse-url.png" medium="image" type="image/png" height="169" width="144"/>
</item>
<item>
  <title>Geocoding in Python</title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-04-27-geocoding/index.html</link>
  <description><![CDATA[ 




<p>Get geographic coordinates for an address with <a href="https://nominatim.org/">Nominatim</a> from <a href="https://www.openstreetmap.org/#map=6/51.330/10.453">OpenStreetMap</a> data.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> geopy.geocoders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Nominatim</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a geolocator object</span></span>
<span id="cb1-4">geolocator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Nominatim(user_agent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get-the-geocode"</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the address for geocoding</span></span>
<span id="cb1-7">address <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unter Sachsenhausen 6, Köln, Germany"</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the geolocation (latitude and longitude) for the given address</span></span>
<span id="cb1-10">location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geolocator.geocode(address)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>((location.latitude, location.longitude))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(50.9426253, 6.9524319)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium</span>
<span id="cb3-2"></span>
<span id="cb3-3">coordinates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [location.latitude, location.longitude]</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a map object</span></span>
<span id="cb3-6">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coordinates, zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a marker for each coordinate</span></span>
<span id="cb3-9">folium.Marker(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coordinates, popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>address).add_to(m)</span>
<span id="cb3-10"></span>
<span id="cb3-11">m  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the map in Jupyter Notebook</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_cc3d1c255078d271cffd35461eb859bf {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_cc3d1c255078d271cffd35461eb859bf&quot; ></div>
        
</body>
<script>
    
    
            var map_cc3d1c255078d271cffd35461eb859bf = L.map(
                &quot;map_cc3d1c255078d271cffd35461eb859bf&quot;,
                {
                    center: [50.9426253, 6.9524319],
                    crs: L.CRS.EPSG3857,
                    zoom: 15,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_773cd0d7b7dab13e8542655a01008ba8 = L.tileLayer(
                &quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;Data by \u0026copy; \u003ca target=\&quot;_blank\&quot; href=\&quot;http://openstreetmap.org\&quot;\u003eOpenStreetMap\u003c/a\u003e, under \u003ca target=\&quot;_blank\&quot; href=\&quot;http://www.openstreetmap.org/copyright\&quot;\u003eODbL\u003c/a\u003e.&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 18, &quot;maxZoom&quot;: 18, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            ).addTo(map_cc3d1c255078d271cffd35461eb859bf);
        
    
            var marker_c09865041797f1a1f5f908131a31316e = L.marker(
                [50.9426253, 6.9524319],
                {}
            ).addTo(map_cc3d1c255078d271cffd35461eb859bf);
        
    
        var popup_d77b0730a6e8b43461db907955dacca4 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_68b8d5f08ff91e258870f6ebb36379ad = $(`<div id=&quot;html_68b8d5f08ff91e258870f6ebb36379ad&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Unter Sachsenhausen 6, Köln, Germany</div>`)[0];
                popup_d77b0730a6e8b43461db907955dacca4.setContent(html_68b8d5f08ff91e258870f6ebb36379ad);
            
        

        marker_c09865041797f1a1f5f908131a31316e.bindPopup(popup_d77b0730a6e8b43461db907955dacca4)
        ;

        
    
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>



 ]]></description>
  <category>Python</category>
  <category>geo</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-04-27-geocoding/index.html</guid>
  <pubDate>Wed, 26 Apr 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-04-27-geocoding/map-cologne.png" medium="image" type="image/png" height="86" width="144"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-04-23-chatgpt/index.html</link>
  <description><![CDATA[ 



<section id="r-coding-with-chatgpt" class="level1">
<h1>R coding with ChatGPT</h1>
<p>Finally I got into <a href="">ChatGPT</a> and started using it.</p>
<p>I was inspired to give ChatGPT a try after reading a <a href="https://statmodeling.stat.columbia.edu/2023/04/18/chatgpt4-writes-stan-code-so-i-dont-have-to/">post</a>. The author describes using ChatGPT to code a <a href=""></a> model.</p>
<p>So I had a conversation with ChatGPT about the social sciences, statistics and R.</p>
<p>I have to say that I am impressed.</p>
<p>ChatGPT and I had an exchange about R. I asked for some examples. ChatGPT originally had a preference for Base-R code but it used more Tidyverse-R approaches after I asked for it. Or it converted the Base-R code to Tidyverse-R at my request.</p>
<p>The code examples were good and I really liked the comments it added to the code. At some point ChatGPT went back to Base-R and I could not fully convince it to use a Tidyverse-R first approach.</p>
<p>So here is a nice output from our exchange. I asked for a text analysis of a Biden speech in R.</p>
<p>Parts from the content of the exchange are below.</p>
<p>I added the <code>rvest::read_html</code> parts from the ChatGPT suggestion. I did not find a way that ChatGPT added it to its initial script. ChatGPT had some Base-R and Tidyverse-R confusion at this point. I updated the title of the figure to the new speech title used as well.</p>
<p>I don’t use <code>tidytext</code> regularly so looking up the information would have taken some time for me. Here, ChatGPT was very helpful. Thanks.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidytext)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rvest)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read in the HTML document</span></span>
<span id="cb1-6">html_doc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_html</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.whitehouse.gov/briefing-room/speeches-remarks/2021/03/31/remarks-by-president-biden-on-the-american-jobs-plan/"</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the text</span></span>
<span id="cb1-9">biden_speech <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_text</span>(html_doc)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize speech</span></span>
<span id="cb1-12">biden_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> biden_speech <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enframe</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(word, text)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove stop words</span></span>
<span id="cb1-17">biden_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> biden_words <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anti_join</span>(stop_words)</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate word frequencies</span></span>
<span id="cb1-21">word_freq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> biden_words <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(word, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize word frequencies</span></span>
<span id="cb1-25">word_freq <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">top_n</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reorder</span>(word, n))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb1-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>,</span>
<span id="cb1-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Word"</span>,</span>
<span id="cb1-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Joe Biden's American Jobs Plan speech"</span>,</span>
<span id="cb1-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Most common words"</span></span>
<span id="cb1-34">  )</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-04-23-chatgpt/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<hr>
<p><strong>user</strong> can we analyse a biden speech?</p>
<p><strong>ChatGPT</strong> Yes, we can use text analysis techniques to analyze a speech by Joe Biden. Here’s an example using the <code>tidytext</code> package:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidytext)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load speech data</span></span>
<span id="cb2-5">biden_speech <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_lines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.rev.com/blog/transcripts/joe-biden-covid-speech-transcript-september-9"</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize speech</span></span>
<span id="cb2-8">biden_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> biden_speech <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enframe</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(word, text)</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove stop words</span></span>
<span id="cb2-13">biden_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> biden_words <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anti_join</span>(stop_words)</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate word frequencies</span></span>
<span id="cb2-17">word_freq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> biden_words <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(word, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize word frequencies</span></span>
<span id="cb2-21">word_freq <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">top_n</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reorder</span>(word, n))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Word"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Most common words in Joe Biden's COVID speech"</span>)</span></code></pre></div>
<p>In this example, we load the transcript of a speech by Joe Biden on the topic of COVID-19, which is available as a text file from the Rev.com blog. We tokenize the speech using the <code>unnest_tokens()</code> function, remove stop words using the <code>anti_join()</code> function, and calculate word frequencies using the <code>count()</code> function. Finally, we visualize the most common words using <code>ggplot2</code>. Note that in order to run this code, you will need to have the <code>readr</code> package installed to read in the text file from the web.</p>
<p><strong>user</strong> the url does not work</p>
<p><strong>ChatGPT</strong> I apologize for that. Here’s an updated example using a different speech by Joe Biden that is available as a text file from the University of Pennsylvania:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidytext)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load speech data</span></span>
<span id="cb3-5">biden_speech <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_lines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.sas.upenn.edu/~jkingsby/BidenIowaSpeech.txt"</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tokenize speech</span></span>
<span id="cb3-8">biden_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> biden_speech <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enframe</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(word, text)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove stop words</span></span>
<span id="cb3-13">biden_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> biden_words <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anti_join</span>(stop_words)</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate word frequencies</span></span>
<span id="cb3-17">word_freq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> biden_words <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(word, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize word frequencies</span></span>
<span id="cb3-21">word_freq <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">top_n</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reorder</span>(word, n))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Word"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Most common words in Joe Biden's Iowa speech"</span>)</span></code></pre></div>
<p>In this example, we load a different speech by Joe Biden that is available as a text file from the University of Pennsylvania. The rest of the code is the same as in the previous example.</p>
<p><strong>user</strong> that url is also not working. do you have a link for a biden speech</p>
<p><strong>ChatGPT</strong> I apologize for the inconvenience. Here is a link to a transcript of a recent speech by Joe Biden on infrastructure:</p>
<p>https://www.whitehouse.gov/briefing-room/speeches-remarks/2021/03/31/remarks-by-president-biden-on-the-american-jobs-plan/</p>
<p>You can copy the text of the speech from this page and use it in the <code>read_lines()</code> function to load it into R for analysis using the <code>tidytext</code> package.</p>
<p><strong>user</strong> how can i convert a html document to text in r?</p>
<p><strong>ChatGPT</strong> You can use the <code>rvest</code> package in R to extract text from HTML documents. Here’s an example code snippet that shows how to do this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rvest)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read in the HTML document</span></span>
<span id="cb4-4">html_doc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_html</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.whitehouse.gov/briefing-room/speeches-remarks/2021/03/31/remarks-by-president-biden-on-the-american-jobs-plan/"</span>)</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the text</span></span>
<span id="cb4-7">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_text</span>(html_doc)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the text</span></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(text)</span></code></pre></div>
<p>In this example, we use the <code>read_html()</code> function from <code>rvest</code> to read in the HTML document from the provided URL. We then use the <code>html_text()</code> function to extract the text from the HTML document. Finally, we use <code>cat()</code> to print the text to the console.</p>
<p>Note that the <code>rvest</code> package is designed for web scraping, so it is important to respect the terms of use and not use it to scrape websites without permission.</p>
<p><strong>user</strong> ok, can you add that to the r code snippet above?</p>
<p><strong>ChatGPT</strong></p>
<p>(…)</p>


</section>

 ]]></description>
  <category>R</category>
  <category>AI</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-04-23-chatgpt/index.html</guid>
  <pubDate>Sat, 22 Apr 2023 22:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-04-23-chatgpt/ChatGPT-logo.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title></title>
  <link>https://hdigital.github.io/learning-diary/posts/2023-03-20-r-wasm/index.html</link>
  <description><![CDATA[ 



<section id="webr-webassembly" class="level1">
<h1>WebR (WebAssembly)</h1>
<p>I read about the <a href="https://docs.r-wasm.org/webr/latest/">webR</a> release on the <a href="https://www.tidyverse.org/blog/2023/03/webr-0-1-0/">Tidyverse blog</a>. It allows to run R in a browser.</p>
<p>So I went to <a href="https://webr.r-wasm.org/latest/">webr.r-wasm.org</a> and gave it a try.</p>
<p>I tried to install the <em>tidyverse</em> with <code>webr::install("tidyverse")</code>. That did not work. For me, there is little use of R without the <em>tidyverse</em>.</p>
<p>Installing <em>dplyr</em> and <em>ggplot2</em> individually worked. So that I could run the following code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3"></span>
<span id="cb1-4">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(mtcars)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 32
Columns: 11
$ mpg  &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…
$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…
$ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…
$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…
$ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…
$ wt   &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…
$ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…
$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…
$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…
$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…
$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dt, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> hp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> cyl)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-03-20-r-wasm/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Typing the R commands in a browser shell without tab completion and no R help was challenging though.</p>
<p>Having R in a browser quickly available is nice 😊.</p>
<hr>
<p><img src="https://hdigital.github.io/learning-diary/posts/2023-03-20-r-wasm/r-wasm.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>R</category>
  <category>cloud</category>
  <guid>https://hdigital.github.io/learning-diary/posts/2023-03-20-r-wasm/index.html</guid>
  <pubDate>Sun, 19 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://hdigital.github.io/learning-diary/posts/2023-03-20-r-wasm/r-wasm.png" medium="image" type="image/png" height="62" width="144"/>
</item>
</channel>
</rss>
